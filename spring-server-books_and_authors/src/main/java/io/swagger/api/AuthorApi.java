/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Author;
import io.swagger.model.Authors;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-29T20:48:13.993Z[GMT]")
@Validated
public interface AuthorApi {

    @Operation(summary = "Authors GET endpoint", description = "List author", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Authors.class))) })
    @RequestMapping(value = "/author",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Authors> authorGet(@Parameter(in = ParameterIn.QUERY, description = "The name of the author" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name);


    @Operation(summary = "Authors POST endpoint", description = "Add a new Author", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Successful operation") })
    @RequestMapping(value = "/author",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> authorPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Author body);


    @Operation(summary = "Author PUT endpoint", description = "Modify Author", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "202", description = "Successful opreation") })
    @RequestMapping(value = "/author",
        method = RequestMethod.PUT)
    ResponseEntity<Void> authorPut(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The name of the Author" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "name", required = true) String name, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Birth date of the author" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "birhday", required = true) Integer birhday);

}

